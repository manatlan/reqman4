root: https://github.com                            # to define a base host for relative url

# proxy: https://proxy:8080                         # you can define a proxy with this key

timeout: 10000                                       # you can set a limit timeout (in ms)
                                                    # if none, default is 60_000 ms

###################################################
SUB_SCENAR:                                         # <- declare a sub scenario (see RUN secion)
###################################################

  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  - GET: https://jsonplaceholder.typicode.com/todos
  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    doc: "test a json api (return a list)"
    tests:
      - R.status == 200
      - len(R.json) > 0                             # 'R.json' is the json repr of the response

  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  - GET: https://jsonplaceholder.typicode.com/todos/<<num>>
  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    doc: |
      test the todo {{num}} from the previous call   
      <br> <b style='color:orange'>--> {{R.json.title}}</b>
    tests:
      - R.status == 200
      - R.json.id == num
    params: <<[dict(num=i['id']) for i in R.json[:5]]>> # limit to the first 5 of the previous response


###################################################
###################################################
RUN:                                                # <- this declare the scenar in the file !
###################################################
###################################################

  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  - GET: /manatlan/reqman4/                         # this is the http verb, it can be any
  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    doc: just a test on github
    tests:
      - R.status == 200                             # 'R' is the last response object
      - R.text.__contains__( 'manatlan/reqman4' )   # 'R.text' is the text content

  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  - GET: https://http.cat/<<status +  200>>
  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    doc: | # note that you can use HTML in doc !
      just a test on http.cat <br><img src='https://http.cat/<<200 + status>>' width='50px'/>
    tests:
      - R.status == 200
      - R.headers.content_type == 'image/jpeg'      # 'R.headers' is a dict/attibuts (case insensitive)
      - len(R.content) > 0                          # 'R.content' is the bytes content
    params:
      - status: 0   # \
      - status: 1   # |---> iterate for each value of status
      - status: 2   # /

  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  - TRACE: https://http.cat/500
  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    doc: never called
    tests:
      - R.status == 200
    params: []     # this http verb will never be called, because empty list

  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  - CALL: SUB_SCENAR
  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  - GET: https:/invalid_url.nimp.nawak
  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    doc: this is a non playable request, the response is empty <<R>>
    tests:
      - R.status == 0   
      - R.text == ""
      - R.content == b""
      - not R.headers
      - 0 <= R.time < 100                          # 'R.time' is elapsed time


# note that reqman (rq) will return a rc (return code) which is the nb of failed tests !
# if rc==0 : all is ok
# if rc==-1 : a bug/error