# Test scenario for variable substitutions

root: https://httpbin.org

# --- Variables for substitution ---
my_string: "world"
my_number: 123
my_list: [1, "two", {"three": 3}]
my_dict:
  key1: "value1"
  key2: 42

# --- Python function to generate params ---
# it will be wrapped in a function with one argument named 'x'
list_to_params: |
  return [{"item": item} for item in x]

# --- Sub-scenario for stepCall test ---
scenar_to_call:
  - GET: /get?val=<<val>>&source=<<source>>
    tests:
      - R.status == 200
      - R.json.args.val == str(val)
      - R.json.args.source == source

RUN:
  # --- Test 1: Substitution in URL, headers, and doc ---
  - GET: /get?q={{my_string}}&n=<<my_number>>&list_item=<<my_list[1]>>
    doc: "Request with string '{{my_string}}' and number <<my_number>>"
    headers:
      X-My-Header: "{{my_string}}-<<my_number>>"
      X-My-List-Item: "<<my_list[1]>>"
      X-My-Dict-Item: "{{my_dict.key1}}"
      X-My-Dict-Item-2: "{{my_dict['key2']}}"
    tests:
      - R.status == 200
      - R.json.args.q == "world"
      - R.json.args.n == "123"
      - R.json.args.list_item == "two"
      - R.json.headers["X-My-Header"] == "world-123"
      - R.json.headers["X-My-List-Item"] == "two"
      - R.json.headers["X-My-Dict-Item"] == "value1"
      - R.json.headers["X-My-Dict-Item-2"] == "42"

  # --- Test 2: Substitution in request body ---
  - POST: /post
    body:
      a_string: "<<my_string>>"
      a_number: "{{my_number}}"
      a_list: "<<my_list>>"
      a_dict: "{{my_dict}}"
      computed: "{{ my_number * 2 }}"
      a_bool: true
    tests:
      - R.status == 200
      - R.json.json.a_string == "world"
      - R.json.json.a_number == 123
      - R.json.json.a_list[0] == 1
      - R.json.json.a_list[1] == "two"
      - R.json.json.a_list[2].three == 3
      - R.json.json.a_dict.key1 == "value1"
      - R.json.json.a_dict.key2 == 42
      - R.json.json.computed == 246
      - R.json.json.a_bool == True

  # --- Test 3: Iteration with params on stepHttp ---
  - GET: /get?item={{str(item)}}
    doc: "Testing iteration <<item>>"
    params: <<list_to_params(my_list)>>
    tests:
      - R.status == 200
      - R.json.args.item == str(item)

  # --- Test 4: Iteration with params on stepCall ---
  - CALL: scenar_to_call
    params:
      - val: 10
        source: "static"
      - val: "{{my_number}}"
        source: "<<my_string>>"
